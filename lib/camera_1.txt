
import 'dart:io';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';


class CameraDemo extends StatefulWidget {
  @override
  _CameraDemoState createState() => _CameraDemoState();
}

class _CameraDemoState extends State<CameraDemo> {
 PickedFile _imageFile;
String _status;
bool _imgLoading;
ImagePicker _imagePicker;

@override
  void initState() {
    super.initState();

    _status = "";
    _imgLoading= false;
    _imagePicker = ImagePicker();
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
appBar: AppBar(
  title: Text("Camera TEst"),
),
      body: Container(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.end,
          crossAxisAlignment: CrossAxisAlignment.center,
          mainAxisSize: MainAxisSize.max,
          children: [
            
            _imageFile == null ? Container():
                Expanded(child: Image.file(File(_imageFile.path),filterQuality: FilterQuality.high,)),
            SizedBox(height: 20,),
            Text(_status),
            SizedBox(height: 20,),
            _select(),
          ],
        ),
      ),
    );
  }


  _select(){
  return Container(
    padding: EdgeInsets.all(20.0),
    width: MediaQuery.of(context).size.width,
    color: Colors.black12,
    child: Column(
      mainAxisSize: MainAxisSize.min,
      crossAxisAlignment: CrossAxisAlignment.center,
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        _button("Camera", ImageSource.camera),
        _button("Gallary", ImageSource.gallery),
      ],
    ),
  );
  }

  _button(String text,ImageSource imageSource){
  return FlatButton(onPressed: () async{
    setState(() {
      _imgLoading=true;
      _imageFile = null;
    });

    PickedFile file = await _loadimage(imageSource);

    if(file != null){
      setState(() {
        _imageFile = file;
        _imgLoading= false;
        _status = "Loaded";
      });
      return;
    }

    setState(() {
      _imageFile = null;
      _imgLoading= false;
      _status = "Error";
    });

  },
      child: Text(text));
  }


  Future<PickedFile> _loadimage(ImageSource imageSource)async{
  PickedFile file = await _imagePicker.getImage(source: imageSource);
  if(file != null){

  }

  return file;
  }
}
